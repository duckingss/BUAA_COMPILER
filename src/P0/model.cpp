[ const int<标识符>＝<整数>{,<标识符>＝<整数>};  | char<标识符>＝<字符>{,<标识符>＝<字符>};
{ const int<标识符>＝<整数>{,<标识符>＝<整数>};  | char<标识符>＝<字符>{,<标识符>＝<字符>};}]
[<类型标识符>(<标识符>|<标识符>'['<无符号整数>']'|<标识符>'['<无符号整数>']''['<无符号整数>']'){,(<标识符>|<标识符>'['<无符号整数>']'|<标识符>'['<无符号整数>']''['<无符号整数>']' )};|
<类型标识符><标识符>=<常量>|<类型标识符><标识符>'['<无符号整数>']'='{'<常量>{,<常量>}'}'|<类型标识符><标识符>'['<无符号整数>']''['<无符号整数>']'='{''{'<常量>{,<常量>}'}'{, '{'<常量>{,<常量>}'}'}'}';
{<类型标识符>(<标识符>|<标识符>'['<无符号整数>']'|<标识符>'['<无符号整数>']''['<无符号整数>']'){,(<标识符>|<标识符>'['<无符号整数>']'|<标识符>'['<无符号整数>']''['<无符号整数>']' )};|
<类型标识符><标识符>=<常量>|<类型标识符><标识符>'['<无符号整数>']'='{'<常量>{,<常量>}'}'|<类型标识符><标识符>'['<无符号整数>']''['<无符号整数>']'='{''{'<常量>{,<常量>}'}'{, '{'<常量>{,<常量>}'}'}'}';}]



{<声明头部>'('<参数表>')' '{'[<常量说明>][<变量说明>]<语句列>'}'|
void<标识符>'('<参数表>')''{'[<常量说明>][<变量说明>]<语句列>'}'}

void main‘(’‘)’ ‘{’[<常量说明>][<变量说明>]<语句列>‘}’

/*

<复合语句>   ::=  [<常量说明>][<变量说明>]<语句列>

<语句列>   ::= ｛<语句>｝

<语句>    ::= <循环语句>｜<条件语句>| <有返回值函数调用语句>;  
                |<无返回值函数调用语句>;｜<赋值语句>;｜<读语句>;
                ｜<写语句>;｜<情况语句>｜<空>;|<返回语句>; | '{'<语句列>'}'

<条件>    ::=  <表达式><关系运算符><表达式>
<因子>    ::= <标识符>｜<标识符>'['<表达式>']'
            |<标识符>'['<表达式>']''['<表达式>']'
            |'('<表达式>')'｜<整数>|<字符>｜<有返回值函数调用语句>  
        
*/
/*
情况子语句： 必须有缺省&&case必须为常量
写语句:(字符串,表达式)
写语句:(标识符)
*/